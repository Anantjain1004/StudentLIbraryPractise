package com.example.Student_Library_Management_System.Services;

import com.example.Student_Library_Management_System.DTOs.StudentUpdateMobRequestDto;
import com.example.Student_Library_Management_System.Enums.CardStatus;
import com.example.Student_Library_Management_System.Model.Card;
import com.example.Student_Library_Management_System.Model.Student;
import com.example.Student_Library_Management_System.Repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class StudentService {

    @Autowired
    StudentRepository studentRepository;
    public String createStudent(Student student){

        //Card should be autogenerated when student is created
        Card card = new Card();
        card.setCardStatus(CardStatus.ACTIVATED);
        card.setStudentVariableName(student);//using this foreign key will be set,we fill detail
        //of this column using this like this card belong to this person,student will automatically be filled

        //Let's go to the student
        student.setCard(card);//setting the card as wel same as above

        //if there was a unidirectional mapping then we have to save both of them,
        // but we will use bidirectional so child will automatically be saved
        studentRepository.save(student);

        //By cascading effect child will automatically be saved

        return "Student and Card added";
    }

    public String findNameByEmail(String email){
        Student student = studentRepository.findByEmail(email);
        return student.getName();
    }

    public String updateMob(StudentUpdateMobRequestDto studentReq){

        //Convert the Dto into entity so that it could be saved better


          //first we will try to fetch original data
        Student originalStudent = studentRepository.findById(studentReq.getId()).get();
        //We will keep the other properties as it is: and only change the required parameters
        originalStudent.setMobNo(studentReq.getMobNo());
        //Always the entity object is saved
        studentRepository.save(originalStudent);
        return "Student has been updated successfully";
    }
}
